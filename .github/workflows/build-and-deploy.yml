name: Build and Deploy

# 触发条件
on:
  # 推送到主分支时触发
  push:
    branches: [ main, master ]
  # 手动触发
  workflow_dispatch:
  # Pull Request 时触发（仅构建，不部署）
  pull_request:
    branches: [ main, master ]

# 设置权限
permissions:
  contents: read
  pages: write
  id-token: write

# 并发控制
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 构建作业
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 检出代码
    - name: Checkout
      uses: actions/checkout@v4
      
    # 设置 Node.js 环境
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    # 安装依赖
    - name: Install dependencies
      run: npm ci
      
    # 运行 ESLint 检查
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
      
    # 运行 TypeScript 类型检查
    - name: TypeScript check
      run: npx tsc --noEmit
      env:
        # 从GitHub Secrets中获取API密钥
        VITE_OMDB_API_KEY: ${{ secrets.VITE_OMDB_API_KEY }}

    # 检查环境变量配置
    - name: Debug environment
      run: |
        echo "检查环境变量设置..."
        echo "VITE_OMDB_API_KEY is set: ${{ secrets.VITE_OMDB_API_KEY != '' }}"
        # 注意：不要直接输出密钥值！
      
    # 构建项目
    - name: Build project
      run: npm run build
      env:
        # 从GitHub Secrets中获取API密钥
        VITE_OMDB_API_KEY: ${{ secrets.VITE_OMDB_API_KEY }}
        # 设置基础路径，适用于 GitHub Pages
        VITE_BASE_PATH: ${{ github.event.repository.name != github.repository_owner.login && format('/{0}/', github.event.repository.name) || '/' }}
        
    # 上传构建产物
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
        retention-days: 30
        
    # 如果是主分支，准备 GitHub Pages 部署
    - name: Setup Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/configure-pages@v4
      
    - name: Upload to GitHub Pages
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      uses: actions/upload-pages-artifact@v3
      with:
        path: dist/

  # 部署到 GitHub Pages（仅在主分支）
  deploy:
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  # 创建 Release（仅在推送 tag 时）
  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
        
    # 创建压缩包
    - name: Create release archive
      run: |
        cd dist
        zip -r ../film-name-decoder-${{ github.ref_name }}.zip .
        tar -czf ../film-name-decoder-${{ github.ref_name }}.tar.gz .
        
    # 创建 GitHub Release
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          film-name-decoder-${{ github.ref_name }}.zip
          film-name-decoder-${{ github.ref_name }}.tar.gz
        body: |
          ## 🎬 影视文件名解析器 ${{ github.ref_name }}
          
          ### 📦 下载说明
          - `film-name-decoder-${{ github.ref_name }}.zip` - Windows 用户推荐
          - `film-name-decoder-${{ github.ref_name }}.tar.gz` - Linux/macOS 用户推荐
          
          ### 🚀 部署说明
          1. 下载对应的压缩包
          2. 解压到 Web 服务器目录
          3. 访问 `index.html` 即可使用
          
          ### ✨ 主要功能
          - 智能解析影视文件名
          - IMDB 信息查询
          - 响应式设计
          - 离线可用
          
          ---
          **在线体验**: ${{ steps.deployment.outputs.page_url || format('https://{0}.github.io/{1}/', github.repository_owner, github.event.repository.name) }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}